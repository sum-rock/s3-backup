#!/usr/bin/python3

import click

from s3_backup import Backup, Initialize, ManageProfiles, SettingsConstructor


@click.group()
def cli():
    pass


@cli.command(help="Initialize the CLI, required before executing or managing")
@click.option("--path", help="indicate where to store your s3-backup data")
def init(path):
    if not path:
        raise click.BadOptionUsage("--path", "Must specify a path.")

    i = Initialize()
    i.do_initialize(path)
    click.echo("success")


@click.group(help="Execution commands, including backup and restore")
def execute():
    pass


@execute.command(help="Perform backup operation")
@click.option("--name", help="indicate the profile to backup")
def backup(name):
    if not name:
        raise click.BadOptionUsage("--name", "Must specify a profile.")

    settings = SettingsConstructor(profile_name=name)
    profile = settings.get_profile()
    Context = settings.get_context_klass()

    with Context():
        b = Backup(profile)
        b.do_backup()

    click.echo("success")


@click.group(help="Profile management commands, including add, remove, and edit")
def profile():
    pass


@profile.command(help="Create a new profile")
@click.option("--name", help="name of the new profile")
def create(name):
    if not name:
        raise click.BadOptionUsage("--name", "Must provide a name for your profile.")
    m = ManageProfiles()
    m.do_add(name)
    

@profile.command(help="Edit a profile")
@click.option("--name", help="name of the profile to edit")
def edit(name):
    m = ManageProfiles()
    m.do_edit(name)


@profile.command(help="Edit a profile")
@click.option("--name", help="name of the profile to edit")
def remove(name):
    m = ManageProfiles()
    m.do_remove(name)

    
if __name__ == "__main__":
    cli.add_command(execute)
    cli.add_command(profile)
    cli()
